from unittest.mock import patch

import numpy as np

from rocketpy import utilities


def test_compute_CdS_from_drop_test():
    assert (
        utilities.compute_cd_s_from_drop_test(31.064, 18, 1.0476) == 0.3492311157844522
    )


def test_create_dispersion_dictionary():
    """Test if the function returns a dictionary with the correct keys.
    It reads the keys from the dictionary generated by the utilities function
    and compares them to the expected.
    Be careful if you change the "fixtures/dispersion/Valetudo_inputs.csv" file.
    """

    returned_dict = utilities.create_dispersion_dictionary(
        "tests/fixtures/dispersion/Valetudo_inputs.csv"
    )

    test_array = np.genfromtxt(
        "tests/fixtures/dispersion/Valetudo_inputs.csv",
        usecols=(1, 2, 3),
        skip_header=1,
        delimiter=";",
        dtype=str,
    )
    test_dict = dict()
    for row in test_array:
        if row[0] != "":
            if row[2] == "":
                try:
                    test_dict[row[0].strip()] = float(row[1])
                except:
                    test_dict[row[0].strip()] = eval(row[1])
            else:
                try:
                    test_dict[row[0].strip()] = (float(row[1]), float(row[2]))
                except:
                    test_dict[row[0].strip()] = ""
    assert returned_dict == test_dict


# Tests not passing in the CI, but passing locally due to
# different values in the ubuntu and windows machines

# @patch("matplotlib.pyplot.show")
# def test_apogee_by_mass(mock_show, flight):
#     f = utilities.apogee_by_mass(flight=flight, min_mass=5, max_mass=20, points=5)
#     assert abs(f(5) - 3528.2072598) < 1e-6
#     assert abs(f(10) - 3697.1896424) < 1e-6
#     assert abs(f(15) - 3331.6521059) < 1e-6
#     assert abs(f(20) - 2538.4542953) < 1e-6
#     assert f.plot() == None


# @patch("matplotlib.pyplot.show")
# def test_liftoff_by_mass(mock_show, flight):
#     f = utilities.liftoff_speed_by_mass(
#         flight=flight, min_mass=5, max_mass=20, points=5
#     )
#     assert abs(f(5) - 40.70236234988934) < 1e-6
#     assert abs(f(10) - 31.07885818306235) < 1e-6
#     assert abs(f(15) - 26.054819726081266) < 1e-6
#     assert abs(f(20) - 22.703279913437058) < 1e-6
#     assert f.plot() == None
